resources:
- repo: self
#Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases
jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
      matrix:
#        Python27:
#          python.version: '2.7'
#        Python34:
#          python.version: '3.4'
#        Python35:
#          python.version: '3.5'
#        Python36:
#          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 1
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: 'python -m pip install --upgrade pip'
    displayName: 'Update pip'

  - script: 'python -m pip install azure-iot-device'
    displayName: 'Install provisioning device SDK'

  - script: 'python -m pip install -U -r requirements_test.txt'
    displayName: 'Install provisioning service SDK and pytest'

  - script: 'echo $(openssl version)'
    displayName: 'Check openssl version'

  - script: 'echo $(Build.SourcesDirectory)'
    displayName: 'What is build source directory'

  - script: 'echo $(Agent.WorkFolder)'
    displayName: 'What is agent work directory'

  - script: |
      cd $(Agent.WorkFolder)
      cd ..
      touch .rnd
    displayName: 'create random number generator file due to openssl issues'

  - script: |
      cd $(Build.SourcesDirectory)/azure_provisioning_e2e/tests
      mkdir demoCA
      cp config/openssl.cnf demoCA/openssl.cnf
      mkdir demoCA/private
      mkdir demoCA/newcerts
      touch demoCA/index.txt
      echo 1000 > demoCA/serial
      openssl genrsa -aes256 -out demoCA/private/intermediate_key.pem -passout pass:leviosa 4096
      openssl req -config demoCA/openssl.cnf -key demoCA/private/intermediate_key.pem -passin pass:leviosa -new -sha256 -out demoCA/newcerts/intermediate_csr.pem -subj "/C=US/CN=e2edpswingardium"
    displayName: 'Direct openssl intermediate creation to check'

  - script: |
      cd $(Build.SourcesDirectory)/azure_provisioning_e2e/scripts
      python check_exists.py
    displayName: 'check if intermediates were created'

#  - script: |
#      cd $(Build.SourcesDirectory)/azure_provisioning_e2e/tests
#      cp config/openssl.cnf openssl.cnf
#      openssl req -out geekflare.csr -newkey rsa:2048 -nodes -keyout geekflare.key -subj "//CN=geek"
#      openssl req -x509 -sha256 -nodes -newkey rsa:2048 -keyout gfselfsigned.key -out gfcert.pem
#    displayName: 'Direct openssl to check'

#  - script: |
#      cd $(Build.SourcesDirectory)/azure_provisioning_e2e/tests
#      pytest test_scenario_simple_sync.py --junitxml=junit/dps-e2e-test-results.xml
#    displayName: 'Run Specified E2E Test with env variables by going in for cert creation'

#  - script: 'pytest $(Build.SourcesDirectory)/azure_provisioning_e2e/tests/test_scenario_simple_sync.py --junitxml=junit/test-results.xml'
#    displayName: 'Run Specified E2E Test with env variables directly'

    env:
      IOTHUB_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-IOTHUB-CONNECTION-STRING)
      IOTHUB_EVENTHUB_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-IOTHUB-EVENTHUB-CONNECTION-STRING)
      IOTHUB_CA_ROOT_CERT: $(PYTHONPREVIEW-LINUX-IOTHUB-CA-ROOT-CERT)
      IOTHUB_CA_ROOT_CERT_KEY: $(PYTHONPREVIEW-LINUX-IOTHUB-CA-ROOT-CERT-KEY)
      STORAGE_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-STORAGE-CONNECTION-STRING)

      PROVISIONING_DEVICE_ENDPOINT: $(PYTHONPREVIEW-LINUX-DPS-DEVICE-ENDPOINT)
      PROVISIONING_SERVICE_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-DPS-CONNECTION-STRING)
      PROVISIONING_DEVICE_IDSCOPE: $(PYTHONPREVIEW-LINUX-DPS-ID-SCOPE)

      PROVISIONING_ROOT_CERT: $(PYTHONPREVIEW-LINUX-IOT-PROVISIONING-ROOT-CERT)
      PROVISIONING_ROOT_CERT_KEY: $(PYTHONPREVIEW-LINUX-IOT-PROVISIONING-ROOT-CERT-KEY)
      PROVISIONING_ROOT_PASSWORD: $(PYTHONPREVIEW-LINUX-PROVISIONING-ROOT-PASSWORD)
#      DPS_CONN_STRING_INVALID_CERT: $(DPS-CONN-STRING-INVALID-CERT)
#      DPS_GLOBAL_DEVICE_ENDPOINT_INVALID_CERT: $(DPS-GLOBAL-DEVICE-ENDPOINT-INVALID-CERT)
#      IOTHUB_CONN_STRING_INVALID_CERT: $(IOTHUB-CONN-STRING-INVALID-CERT)
#      IOTHUB_DEVICE_CONN_STRING_INVALID_CERT: $(IOTHUB-DEVICE-CONN-STRING-INVALID-CERT)

#  - task: PublishTestResults@2
#    displayName: 'Publish Test Results **/*-dps-e2e-test-results.xml'
#    inputs:
#      testResultsFiles: '**/*-dps-e2e-test-results.xml'
#      testRunTitle: 'Python $(python.version)'
#    condition: always()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFiles: '**/dps-e2e-test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
