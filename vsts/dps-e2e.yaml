resources:
- repo: self
#Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases
jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
      matrix:
#        Python27:
#          python.version: '2.7'
#        Python34:
#          python.version: '3.4'
        Python35:
          python.version: '3.5'
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 1
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: 'python -m pip install --upgrade pip'
    displayName: 'Update pip'

  - script: 'python -m pip install azure-iot-device'
    displayName: 'Install provisioning device SDK'

  - script: 'python -m pip install -U -r requirements_test.txt'
    displayName: 'Install provisioning service SDK and pytest'

  - script: |
      cd $(Build.SourcesDirectory)/azure_provisioning_e2e/tests
      pytest test_scenario_simple_sync.py --junitxml=junit/test-results.xml
    displayName: 'Run Specified E2E Test with env variables'

#  - script: 'pytest $(Build.SourcesDirectory)/azure_provisioning_e2e/tests/test_scenario_simple_sync.py --junitxml=junit/test-results.xml'
#    displayName: 'Run Specified E2E Test with env variables'

#  - script: echo hello world
#    displayName: 'see if it works'

    env:
      IOTHUB_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-IOTHUB-CONNECTION-STRING)
      IOTHUB_EVENTHUB_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-IOTHUB-EVENTHUB-CONNECTION-STRING)
      IOTHUB_CA_ROOT_CERT: $(PYTHONPREVIEW-LINUX-IOTHUB-CA-ROOT-CERT)
      IOTHUB_CA_ROOT_CERT_KEY: $(PYTHONPREVIEW-LINUX-IOTHUB-CA-ROOT-CERT-KEY)
      STORAGE_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-STORAGE-CONNECTION-STRING)

      PROVISIONING_DEVICE_ENDPOINT: $(PYTHONPREVIEW-LINUX-DPS-DEVICE-ENDPOINT)
      PROVISIONING_SERVICE_CONNECTION_STRING: $(PYTHONPREVIEW-LINUX-DPS-CONNECTION-STRING)
      PROVISIONING_DEVICE_IDSCOPE: $(PYTHONPREVIEW-LINUX-DPS-ID-SCOPE)

      PROVISIONING_ROOT_CERT: $(PYTHON-SCRIPT-PROVISIONING-ROOT-CERT)
      PROVISIONING_ROOT_CERT_KEY: $(PYTHON-SCRIPT-PROVISIONING-ROOT-KEY)
      PROVISIONING_ROOT_PASSWORD: $(PYTHONPREVIEW-LINUX-PROVISIONING-ROOT-PASSWORD)
#      PROVISIONING_INTERMEDIATE_CERT: $(PYTHON-SCRIPT-PROVISIONING-INTERMEDIATE-CERT)
#      PROVISIONING_INTERMEDIATE_CERT_KEY: $(PYTHON-SCRIPT-PROVISIONING-INTERMEDIATE-KEY)
#
#      PROVISIONING_DEVICE_CERT_1: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-CERT-1)
#      PROVISIONING_DEVICE_CERT_2: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-CERT-2)
#      PROVISIONING_DEVICE_CERT_3: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-CERT-3)
#      PROVISIONING_DEVICE_CERT_4: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-CERT-4)
#      PROVISIONING_DEVICE_CERT_5: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-CERT-5)
#
#      PROVISIONING_DEVICE_KEY_1: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-KEY-1)
#      PROVISIONING_DEVICE_KEY_2: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-KEY-2)
#      PROVISIONING_DEVICE_KEY_3: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-KEY-3)
#      PROVISIONING_DEVICE_KEY_4: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-KEY-4)
#      PROVISIONING_DEVICE_KEY_5: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-KEY-5)
#
#      PROVISIONING_DEVICE_COMMON_NAME_1: $(PYTHON-SCRIPT-DEVICE-1-COMMON-NAME)
#      PROVISIONING_DEVICE_COMMON_NAME_2: $(PYTHON-SCRIPT-DEVICE-2-COMMON-NAME)
#      PROVISIONING_DEVICE_COMMON_NAME_3: $(PYTHON-SCRIPT-DEVICE-3-COMMON-NAME)
#      PROVISIONING_DEVICE_COMMON_NAME_4: $(PYTHON-SCRIPT-DEVICE-4-COMMON-NAME)
#      PROVISIONING_DEVICE_COMMON_NAME_5: $(PYTHON-SCRIPT-DEVICE-5-COMMON-NAME)
#      PROVISIONING_DEVICE_PASSWORDS: $(PYTHON-SCRIPT-PROVISIONING-DEVICE-PASSWORDS)
#      DPS_CONN_STRING_INVALID_CERT: $(DPS-CONN-STRING-INVALID-CERT)
#      DPS_GLOBAL_DEVICE_ENDPOINT_INVALID_CERT: $(DPS-GLOBAL-DEVICE-ENDPOINT-INVALID-CERT)
#      IOTHUB_CONN_STRING_INVALID_CERT: $(IOTHUB-CONN-STRING-INVALID-CERT)
#      IOTHUB_DEVICE_CONN_STRING_INVALID_CERT: $(IOTHUB-DEVICE-CONN-STRING-INVALID-CERT)

#  - task: PublishTestResults@2
#    displayName: 'Publish Test Results **/*-dps-e2e-test-results.xml'
#    inputs:
#      testResultsFiles: '**/*-dps-e2e-test-results.xml'
#      testRunTitle: 'Python $(python.version)'
#    condition: always()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
